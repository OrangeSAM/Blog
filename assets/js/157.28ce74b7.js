(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{358:function(s,n,e){"use strict";e.r(n);var a=e(3),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"题目内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题目内容"}},[s._v("#")]),s._v(" 题目内容")]),s._v(" "),e("p",[s._v("给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。")]),s._v(" "),e("p",[s._v("不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("e.g\n给定数组 nums = [1,1,2], \n\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 \n\n你不需要考虑数组中超出新长度后面的元素。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("又是原地算法，吃一堑长一智。")]),s._v(" "),e("h3",{attrs:{id:"解法一-set去重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解法一-set去重"}},[s._v("#")]),s._v(" 解法一，Set去重")]),s._v(" "),e("p",[s._v("看到去重，脑子里首先想到的是使用Set，但又因为原地算法的限制，所以将获得新数组挨个赋值给原数组。思路和实现都不难。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var removeDuplicates = function(nums) {\n    let tempArr = Array.from(new Set(nums))\n    nums.length = tempArr.length\n    for (let i = 0; i < tempArr.length; i++) {\n        nums[i] = tempArr[i]\n    }\n    return nums.length\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h3",{attrs:{id:"解法二-splice删除重复元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解法二-splice删除重复元素"}},[s._v("#")]),s._v(" 解法二，Splice删除重复元素")]),s._v(" "),e("p",[s._v("解这题的要点在于如何判断重复元素。这里，由之前第一题两数之和的巧解法想到一个思路，利用对象来存储判断该元素是否已出现。如果已经出现，那就删除当前重复的元素。")]),s._v(" "),e("p",[s._v("不过用这个方法也踩了个坑，坑在没想明白在什么时候处理"),e("code",[s._v("i")]),s._v("的自增， 以传入数组"),e("code",[s._v("[0,0,0,1]")]),s._v("为例，当i=1时，由于temp对象存在0，也就是for循环中if里的条件为真，此时第二个"),e("code",[s._v("0")]),s._v("成功被删除，但数组长度会因为元素的删除而减1，因为"),e("code",[s._v("splice")]),s._v("会影响原数组。")]),s._v(" "),e("p",[s._v("删除第二个0，i自增变为2，而数组长度也为2。由此，原数组中的第三个0不会被访问到，也不会被删除。循环也结束。")]),s._v(" "),e("p",[s._v("需要把自增放在"),e("code",[s._v("else")]),s._v("的语句块中，这样可以一直删除重复的元素，直到没有。")]),s._v(" "),e("p",[s._v("对于for循环使用知识的一点回顾，在这之前我一直以为for循环括号里的三个东西是一定不能少的，也因此没有想到自增语句还可以放到后面。括号里三个语句都可以没有，但是两个分号不能少。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var removeDuplicates = function(nums) {\n    let temp = {}\n    for (let i = 0; i < nums.length;) {\n        if(temp[nums[i]]) {\n            nums.splice(i, 1)\n        } else {\n            temp[nums[i]] = true\n            i++\n        }\n    }\n    return nums.length\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("//  i + 1 会遇到两个元素相同却没有办法的问题\n//  为 i 会遇到全都给删除的情况")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var removeDuplicates = function(nums) {\n    let temp = {}\n    for (let i = nums.length; i > 0; i--) {\n        temp[nums[i]] = true\n        if (temp[nums[i - 1]]) {\n            nums.splice(i - 1, 1)\n        }\n    }\n    return nums.length\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h3",{attrs:{id:"双指针法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双指针法"}},[s._v("#")]),s._v(" 双指针法")]),s._v(" "),e("p",[s._v("这个解法一开始我并没有想到，是后面在题解区。简单来说，双指针法的逻辑就是，定义一前一后两个位置的下标。如果相同，其中一个下标+1继续比较，直到不同，另一个下标才+1。这样，但凡遇到不同的才加1就直到了数组所有不重复元素的长度。")]),s._v(" "),e("p",[s._v("对于"),e("code",[s._v("nums[p+1] = nums[q]")]),s._v("这句，虽然我们可以通过"),e("code",[s._v("p++")]),s._v("获得非重复元素的长度。但按照题目要求，我们需要把不重复的元素放到前面。")]),s._v(" "),e("p",[s._v("此外，再来回顾一下 "),e("code",[s._v("++x")]),s._v("和"),e("code",[s._v("x++")]),s._v("的区别如下。由于一开始"),e("code",[s._v("p")]),s._v("计数为0，所以最后应该使用++p。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("a = i++; //等价于a = i; i = i + 1;\nb = ++i; //等价于i = i + 1; b = i;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var removeDuplicates = function(nums) {\n    let p = 0, q = 1;\n    while (q < nums.length) {\n        if (nums[p] === nums[q]) {\n            q++\n        } else {\n            nums[p + 1] = nums[q]\n            p++;\n            q++;\n        }\n    }\n    return ++p\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("h3",{attrs:{id:"不用splice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不用splice"}},[s._v("#")]),s._v(" 不用splice")]),s._v(" "),e("p",[s._v("这个解法，本质上就是上面双指针版本的简化版。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var removeDuplicates = function (nums) {\n    var len = 1;\n    for (var i = 1; i < nums.length; i++) {\n        if (nums[i] != nums[i-1]) {\n            nums[len++] = nums[i];\n        }\n    }\n    return len\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);