(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{341:function(t,n,e){"use strict";e.r(n);var v=e(3),a=Object(v.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("v-bind这样的东西称为指令，指令带有前缀v-，以表示他们是vue提供的特殊特性，他们会在渲染的DOM上应用特殊的响应式行为。")]),t._v(" "),e("p",[t._v("使用Vue的省心之处在于，不用触碰DOM，所有的DOM操作都有VUE处理，编写代码时只要关心逻辑层就好了")]),t._v(" "),e("p",[t._v("组件系统是Vue的另一个重要概念，因为他是一种抽象，允许我们使用小型、独立和同城可复用的组件构建大型应用。")]),t._v(" "),e("p",[t._v("所有的Vue组件都是Vue实例，并且接受相同的选项对象（一些根实例特有的选项除外）")]),t._v(" "),e("p",[e("code",[t._v('for(var msg of ["how","are","you"])')])]),t._v(" "),e("p",[t._v("一个Vue应用由一个通过new Vue创建的根vue实例，以及可选的嵌套的、可复用的组件数组成。")]),t._v(" "),e("p",[t._v("所有的Vue组件都是Vue实例，并且接受相同的选项对象。\nVue组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构件工具集成。")]),t._v(" "),e("p",[t._v("当一个Vue实例被创建时，他向Vue的响应式系统中加入了其data对象中能找到的所有属性。当这些属性的值发生改变时，视图将会产生 “响应”，即匹配更新为新的值。\n要注意的是，只有当实例被创建时data中存在的属性才是响应式的。\n但是使用object.freeze()会阻止现有属性的修改。")]),t._v(" "),e("p",[t._v("实例生命周期钩子\n每个Vue实例被创建时都要经过一系列的初始化过程，在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己代码的机会。\n生命周期钩子的this上下文指向调用他的Vue实例。\nbeforecreate          created\nbeforemounte       mounted\nbeforeupdate        updated\nbeforedestroy       destroyed")]),t._v(" "),e("p",[t._v("模板语法\n在底层的实现上，Vue将模板编译成虚拟DOM渲染函数。\n插值\n文本\t"),e("code",[t._v("data")]),t._v(",使用v-once指令，可以执行一次性地插值。\n原始HTML\t使用v-html输出真正的HTML"),e("code",[t._v('<p v-html="rawhtml"></p>')]),t._v("\n特性\t双大括号语法不能作用在HTML特性上，应使用v-bind指令\n使用js表达式\t每个绑定都只能包含单个表达式， "),e("code",[t._v("{ok?'yes':'no'}}")]),t._v("\n指令 directive\n指令是带有v-前缀的特殊特性。\n指令特性的值预期是单个JavaScript表达式。\n指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。\n参数\n一些指令能够接收一个‘参数’，在指令名称后之后以冒号表示。\nv-bind:href           v-on:click\n修饰符 modifiers\n修饰符是以 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。\n.prevent\n.lazy\n缩写\nv-前缀作为一种视觉提示，用来识别模板中Vue特定的特性。\nv-bind b-on\nv-bind:href => :href\nv-on:click => @click")]),t._v(" "),e("p",[t._v("计算属性和侦听器\n计算属性 computed\n对于任何复杂的逻辑，都应当使用计算属性，避免模板过重导致难以维护\n可以像绑定普通属性一样在模板中绑定计算属性。\n计算属性默认只有getter,不过在需要的时候也可以写一个setter。\n计算属性缓存VS方法\n计算属性是基于他们的依赖进行缓存的，只在相关依赖发生改变时他们才会重新求值。\n每当触发重新渲染时，调用方法总会再次执行函数。\n计算属性的意义：避免重复的计算开销\n计算属性vs侦听属性\nVue提供了一种更通用的方式来观察和响应Vue实例上的数据变动：侦听属性。\nwatch\n计算属性的setter\n计算属性默认只有getter,在需要的时候可以提供一个setter")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("侦听器 watch\n\tVue提供了一种更通用的方式来观察和响应Vue实例上的数据变动：侦听属性。\n")])])]),e("p",[t._v("class与style绑定\n操作元素的class列表和内联样式是数据绑定的一个常见需求。\n绑定HTML class\n数组语法：可以给v-bind:class 传一个对象，以动态切换class;可以与普通的class属性共存。也可以在这里绑定一个返回对象的计算属性。\n对象语法：还可以把一个数组传给v-bind:class,以应用一个class列表。\n在数组语法中也可以使用对象语法。\n用在组件上\n"),e("code",[t._v("Vue.component('my-component', { \t\t\t template: '<p class=\"foo bar\">Hi</p>' \t\t\t}) \t\t\t<my-component class=\"baz boo\"></my-component>")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('\t\t`<p class="foo bar baz boo">Hi</p>`\n\t带数据绑定class也同样适用\n\t\t`<my-component v-bind:class="{ active: isActive }"></my-component>`\n\t\t`<p class="foo bar active">Hi</p>`\n\n绑定内联样式\n\t对象语法：直接绑定到一个样式对象通常更好，会让模板更清晰\n\t数组语法：数组语法可以将多个样式对象引用到同一个元素上\n\tVue 会自动添加浏览器引擎前缀\n\t多重值：可以为style绑定中的属性提供一个包含多个值的数组，常用于带前缀的值。\n')])])]),e("p",[t._v("条件渲染\nv-if  v-else  v-else必须紧跟v-if 或者 v-else-if的元素后\n在"),e("code",[t._v("<template>")]),t._v("上使用v-if渲染分组\n"),e("code",[t._v('Vue \t<template v-if="ok"> \t <h1>Title</h1> \t <p>Paragraph 1</p> \t <p>Paragraph 2</p> \t</template>')])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("用key管理可复用的元素\n\nv-show \n另一个用于根据条件展示元素的选项是v-show \n带有v-show的元素始终会被渲染并保留在DOM中，v-show只是简单地切换元素的CSS属性display\n\nv-if VS v-show\nv-if 是真正的条件渲染，会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建\nv-if也是惰性的，在初始渲染条件为假时，则什么都不做，直到条件为真才开始渲染条件块\nv-show始终会渲染，只是基于CSS进行切换。\nv-if有更高的切换开销，v-show有更高的初始渲染开销。\n")])])]),e("p",[t._v("列表渲染\nv-for指令需要使用item in items形式的特殊语法，\nitem是源数据数组并且item是数组元素迭代的别名。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('在V-for块中，拥有对父作用域属性的完全访问权限，\nv-for还支持一个可选的第二个参数为当前项的索引（item,index）in items。\n用of 也行\n\n也可以用v-for通过一个对象的属性来迭代。\nv-for="(value,key,index) in object"\n在遍历对象时，是按Object.keys()的结果遍历，但在不同的js引擎或有不同。\n\n数组更新检测\n\tVue包含一组观察数组的变异方法，所以他们也将会出发视图更新\n\t\tpush() pop()  & shift() unshift() \n\t\tsplice() sort() reverse()\n\t\t\n\t替换数组\n\t\t变异方法会改变被这些方法调用的原始数组。\n\t\t相比之下，也有非变异方法，如filter() concat() slice() \n\t\t这些不会改变原数组，但总是返回一个新数组。\n\t\t\n\t注意事项\n\t\t当利用索引直接设置一个项时，vue不能检测到变动的数组\n\t\t当修改数组的长度时，Vue不能检测到变动的数组\n\t\t使用Vue.set(vm.item,indexOfItem,newValue)或者\n\t\tvm.items.splice(indexOfItem,1,newValue)解决\n\t\t\n\t对象更改注意事项\n\t\tVue不能检测对象属性的添加或删除。\n\t\t使用set解决\n\t\t\n\t显示过滤/排序结果\n\t\t想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据，\n\t\t在这种情况下，可以创建返回过滤或排序数组的计算属性。\n\t\tv-for="n in evennumbers" evennumbers为计算属性\n\t\t在计算属性不适用的情况下，可以使用一个method方法\n\t\tv-for="n in even(numbers)" even为methods\n\t\t\n\t一段取值范围的v-for\n\t\tv-for="n in 10"\n\t\t\n\tv-for on a <template>\n\t\t利用带有v-for的template渲染多个元素\n\t\t\n\tv-for with v-if\n\t\t当他们处于同一个节点时，v-for优先级比v-if更高，这意味着v-if将分别重复允许与每个v-for循环中。\n\t\t\n\t一个组建的v-for\n\t\t在自定义组建里，可以像任何普通元素一样使用v-for\n\t\t暂缺\n')])])]),e("p",[t._v("事件处理\n监听事件\n可以用v-on指令监听DOM事件，并在触发时运行一些JavaScript代码\n事件处理方法\n当事件处理逻辑变得复杂是，v-on需要调用一个方法来处理\n内联处理器中的方法\n除了直接绑定到一个方法，也可以在内联JavaScript语句中调用方法。\n可以用特殊变量$event把它传入方法，以访问原始的DOM事件。\n事件修饰符\n方法只有纯粹的逻辑，而不是去处理DOM事件细节。\n.stop\t阻止单击事件继续传播\n.prevent\t提交事件不再重载页面\n.capture\t添加事件监听器时使用事件捕获模式\n.self\t只当在event.target是当前元素自身时触发处理函数\n.once\t点击事件只会触发一次\n.passive\t滚动事件的默认行为，将会立即触发，不等onScroll")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('\t修饰符可以串联，但要注意顺序；也可以只有修饰符\n按键修饰符\n\t`<input @:keyup.enter="submit">`\n\t.enter\t.tab\t.delete\n\t.esc\t.space\t.up\n\t.down\t.left\t.right\n\t可以通过全局config.keycodes对象自定义按键修饰符别名\n\tVue.config.keyCodes.f1=112\n系统修饰符\n\t可以用以下修饰符实现仅在按下相应按键才触发鼠标或键盘事件的监听器\n\t.ctrl\t.alt\t.shift\t.meta(徽标键)\t.exact\n\t`<input @keyup.alt.67="clear">`\n\t`<input @click.ctrl="dosomething">`\n\t.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件\n\t鼠标修饰符\n\t\t`.left .right .middle`\n')])])]),e("p",[t._v("表单输入绑定\n基础用法\n可以用v-model指令在表单"),e("code",[t._v("<input><textarea><select>")]),t._v("元素上创建双向数据绑定。\nv-model本质是语法糖，负责监听用户的输入事件以更新数据。\nv-model会忽略所有表单元素的value checked selected 等特性的初始值，\n而将Vue实例中的"),e("code",[t._v("data")]),t._v("作为数据来源。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t在文本区域插值<textarea>不会生效，应使用v-model代替。\n\t\n\t复选框，单个&多个，多个使用数组存放\n\t\n\t单选按钮，和单个复选框类似需要有value\n\t\n\t下拉选择框，单选多选v-model都应该放在select中，多选时应声明multiple，\n\t用数组存储选择的值。可配合v-for动态渲染选项\n\t\n值绑定\n\t可以通过v-bind实现v-model绑定动态属性 \n修饰符\n\t.lazy\n\t\t将实时同步的input事件变为change事件\n\t.number\n\t\t自动将用户的输入值转为数值类型\n\t.trim\n\t\t自动过滤用户输入的首尾空白字符\n在组件上使用v-model\n")])])]),e("h3",{attrs:{id:"组件基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件基础"}},[t._v("#")]),t._v(" 组件基础")]),t._v(" "),e("p",[t._v("组件基础\n组件是可复用的Vue实例。\n也因此，他们与new Vue接收相同的选项，data computed watch methods。\n组件可以进行任意次数的复用。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('data必须是个函数，也因此每个实例可以维护一份被返回对象的独立的拷贝，这样就不会影响到其他组件实例的值。\n\n通过prop向子组件传递数据\n\tprop是可以在组件上注册的一些自定义特性，prop数量不限，类型不限。\n\tprop在组件中的配置是一个字符串数组\n\n单个根元素，每个组价必须只有一个根元素\n\n监听子组件事件\n\t在子组件中调用内建的$emit方法并传入事件名称来触发一个事件\n\n使用事件抛出一个值\n\t可以直接在自定义事件上表达式或者到父组件中写方法\n\t\n在组件上使用v-model\n\t<input v-model="search">\n\t\n\t等价于\n\t<input :value="search" @input="search=$event">\n\t\n\t当v-model使用在组件上时，组件内的input 必须\n\t\t将其 value 特性绑定到一个名叫value的prop 是上\n\t\t在其input事件被触发时，将新的值通过自定义的input 事件抛出\n\t<custom-input\n\tv-bind:value="searchText"\n\tv-on:input="searchText = $event"\n\t></custom-input>\n\t\n\tVue.component(\'custom-input\', {\n\tprops: [\'value\'],\n\ttemplate: `\n\t<input\n\tv-bind:value="value"\n\t     v-on:input="$emit(\'input\', $event.target.value)"\n\t   >\n\t`})\n\t\n通过插槽分发内容\n\tslot\n\n动态组件\n\t使用is特性实现在不同的组件之间切换\n\n解析DOM模板时的注意事项\n\t由于HTML元素本身的限制，自定义组件有可能会被作为无效内容提升到外部，\n\t此时可以通过is 特性解决 <tr is="blog-post-row"></tr>\n\t但如果从以下来源使用模板的话，是没有这种限制的\n\t\t字符串 template:\'\'\v单文件组件   .vue\n\t\t<script type="text/x-template"\n')])])]),e("h3",{attrs:{id:"深入了解组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深入了解组件"}},[t._v("#")]),t._v(" 深入了解组件")]),t._v(" "),e("p",[t._v("组件注册\n组件始终需要一个名字，组件名即Vue.Component的第一个参数。\n组件名命名规范使用小写字母加连字符-")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("组件注册分为全局注册和局部注册\n\tVue.component & Vue({ components:{} })\n局部注册的组件在其子组件中不可以用\n\t变为可用的trick是，把组件A的变量名写到B组件名的后面\n模块系统\n\t暂缺\n")])])]),e("p",[t._v("Prop\nprop的大小写问题\n在js中用驼峰，HTML中用短横杆-")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("prop类型\n\t字符串数组\n\t也可以是对象的形式，以规定该prop的更多属性（类型，初始值，必需项等）\n\t\n传递动态或静态prop\n\t可以通过v-bind给prop动态赋值，任何类型的值都可以传给一个prop\n\t但凡希望Vue正确的知道你传递的值类型都需要使用v-bind，不然传递的值\n\t一直都是字符串\n\n\t传入一个对象的所有属性\n单向数据流\n\t所有的prop都使得其父子prop之间形成了单向下行绑定：父级prop的更新会向\n\t下流动到子组件中，但是反过来不选。\n\t如果需要再子组件中修改prop值，两个建议：\n\t\t在组件内定义一个data属性\n\t\t使用计算属性进行值得转换\n\nprop验证\n\t指定prop的类型、设置prop的默认值、自定义prop验证函数\n\t\n非prop特性\n？？？\n\n替换/合并已有的特性\n\t对于绝大多数特性来说，从外部提供给组件的值会替换掉组件内部设置好的值。\n\tclass和style特性稍微智能一些，两边的值会被合并。\n禁用特性继承\n")])])]),e("p",[t._v("自定义事件\n事件名\n使用短横杠对事件进行命名，因为v-on 事件监听器在DOM模板中会被自动转换为全小写\n自定义组件的v-model")]),t._v(" "),e("p",[t._v("插槽\n具名插槽和作用域插槽引入的统一语法，v-slot指令\n取代slot & slot-scope")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("插槽内容\n\t<slot>\n编译作用域\n\t父级模板里的所有内容都是在父级作用域中编译的，\n\t子模板里的所有内容都是子作用域中编译的。\n后备内容\n\t在具体组件中的<slot>里，放置默认的插槽内容，已在父组件没有设置内容时显示\n具名插槽\n作用域插槽\n\t绑定在<slot>元素上的属性被称为插槽prop。\n独占默认插槽的缩写语法\n")])])]),e("p",[t._v("动态组件 & 异步组件\n在动态组件上使用keep-alive\n异步组件\n处理加载状态")]),t._v(" "),e("p",[t._v("处理边界情况\n访问元素&组件\n访问根实例\n$root\n访问父组件实例\n$parent\n访问子组件实例或子元素\n$refs\n依赖注入\nProvide inject\n程序化事件监听器\n$on $once $off\n循环引用\n递归组件")])])}),[],!1,null,null,null);n.default=a.exports}}]);