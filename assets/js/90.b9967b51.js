(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{289:function(e,o,n){"use strict";n.r(o);var t=n(3),d=Object(t.a)({},(function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"dom-是浏览器中的document对象。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom-是浏览器中的document对象。"}},[e._v("#")]),e._v(" DOM 是浏览器中的document对象。")]),e._v(" "),n("p",[e._v("window 对象表示一个包含DOM文档的窗口，其 document 属性指向窗口中载入的 DOM文档 。")]),e._v(" "),n("p",[e._v("DOM的作用是将网页转为一个JavaScript对象，从而可以用脚本进行各种操作。\n浏览器会根据DOM模型，将如HTML这样的结构化文档解析成一系列的节点，再由这些节点组成一个树状结构。")]),e._v(" "),n("p",[e._v("DOM的最小组成单位叫做节点 node,文档的树形结构 DOM树，就是由各种不同类型的节点组成。")]),e._v(" "),n("p",[e._v("节点的类型有7种\nDocument 整个文档树的节点\nDocumentType doctype标签\nElement 网页的各种HTML标签\nAttribute 网页元素的属性\nText 标签之间或标签包含的文本\nComment 注释\nDocumentFragment 文档的片断\n浏览器提供一个原生的节点对象Node，上面的七种节点都继承了Node，因此具有一些共同的属性和方法。")]),e._v(" "),n("p",[e._v("那么问题来了，DOM的继承机制和js的继承机制有没有关系呢")]),e._v(" "),n("h2",{attrs:{id:"节点树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节点树"}},[e._v("#")]),e._v(" 节点树")]),e._v(" "),n("p",[e._v("浏览器原生提供document节点，代表整个文档。\n文档的第一层只有一个节点，就是HTML网页的第一个标签"),n("code",[e._v("<html>")]),e._v("，它构成了树结构的根节点。\n除了根节点，其他节点都有三层关系\n父节点关系 parentNodes\n子节点关系 childNodes\n同级节点关系 sibling 拥有同一个父节点的节点")]),e._v(" "),n("h2",{attrs:{id:"node接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node接口"}},[e._v("#")]),e._v(" Node接口")]),e._v(" "),n("p",[e._v("所有DOM节点对象都继承了Node接口，拥有一些共同的属性和方法。这是DOM操作的基础。\n属性\nNode.prototype.Nodetype\nNode.prototype.NodeName\nNode.prototype.NodeValue\nNode.prototype.textContent\nNode.prototype.baseURI\nNode.prototype.ownerDocument\nNode.prototype.nextSibling\nNode.prototype.previousSibling\nNode.prototype.parentNode\nNode.prototype.parentElement\nNode.prototype.firstChild\nNode.prototype.lastChild\nNode.prototype.childNodes\nNode.prototype.isConnected\n方法\nNode.prototype.appendChild()\nNode.prototype.hasChildNodes()\nNode.prototype.cloneNode()\nNode.prototype.insertBefore()\nNode.prototype.removeChild()\nNode.prototype.replaceChild()\nNode.prototype.contains()\nNode.prototype.compareDocumentPosition()\nNode.prototype.isEqualNode()\nNode.prototype.isSameNode()\nNode.prototype.normalize()\nNode.prototype.getRootNode()")]),e._v(" "),n("p",[e._v("NodeList接口，HTMLCollection接口\n节点都是单个对象，DOM提供两种节点集合，用于容纳多个节点Nodelist和HTMLCollection\n这两种集合都属于接口规范，两者区别Nodelist可以包含各种类型的节点，HTML只能包含HTML元素节点。")]),e._v(" "),n("h2",{attrs:{id:"理解dom结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解dom结构"}},[e._v("#")]),e._v(" 理解DOM结构")]),e._v(" "),n("p",[e._v("核心DOM，针对任何结构化文档的标准模型\nXMLDOM，针对XML文档的标准模型\nHTML DOM，针对HTML文档的标准模型")]),e._v(" "),n("p",[e._v("DOM节点，根据W3C的HTML DOM标准，HTML文档中的所有内容的都是节点\n整个文档是一个文档节点\n每个HTML元素是元素节点\nHTML元素内的文本是文本节点\n每个HTMl属性是属性节点\n注释是注释节点")]),e._v(" "),n("p",[e._v("Document对象是HTML文档的根节点\nDocument对象使我们可以从脚本中对HTML页面中的所有元素进行访问\n（Document对象是window对象的一部分，可通过window.document属性对其进行访问）\n向文档添加事件句柄是什么意思\nHTML DOM节点树\nHTML文本 会被解析为DOM树，树中所有的节点均可通过JavaScript进行访问，所有HTML元素均可被修改，也可以创建或删除节点")]),e._v(" "),n("h3",{attrs:{id:"dom元素对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom元素对象"}},[e._v("#")]),e._v(" DOM元素对象")]),e._v(" "),n("p",[e._v("在HTML中，元素对象代表着一个HTML元素\n元素对象的子节点可以是元素节点 文本节点 注释节点\nNodeList对象代表了节点列表，类似于HTML元素的子节点集合\n元素可以有属性，属性属于属性节点")]),e._v(" "),n("p",[e._v("DOM属性对象\nHTMLDOM节点\nATTR对象，在HTMLDOM中，Attribute对象代表一个HTML属性\nHTML属性总是属于HTML元素")]),e._v(" "),n("p",[e._v("NameNodeMap对象")]),e._v(" "),n("p",[e._v("HTML DOM事件\nDOM 事件允许JavaScript在HTML文档元素中注册不同事件处理程序\n事件通常与函数结合使用，函数不会在事件发生前被执行")]),e._v(" "),n("p",[e._v("可以用于所有HTML元素的属性和方法http://www.w3school.com.cn/jsref/dom_obj_all.asp")]),e._v(" "),n("h3",{attrs:{id:"dom事件对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom事件对象"}},[e._v("#")]),e._v(" DOM事件对象")]),e._v(" "),n("p",[e._v("鼠标事件\n拖动事件\n键盘事件\n框架/对象事件\n表单事件\n剪贴板事件\n打印事件\n多媒体事件\n动画事件\n过渡事件\n其他事件")]),e._v(" "),n("p",[e._v("事件对象")]),e._v(" "),n("h2",{attrs:{id:"节点属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节点属性"}},[e._v("#")]),e._v(" 节点属性")]),e._v(" "),n("p",[e._v("在DOM中 ，每个节点都是一个对象。DOM节点由三个重要的属性\nnodeName:节点名称\nnodeValue:节点的值\nnodeType:节点的类型")]),e._v(" "),n("p",[e._v("nodeName:节点的名称，是只读的。\n元素节点的nodeName与标签名相同\n属性节点的nodeName是属性的名称\n文本节点的nodeName永远是#text\n文档节点的nodeName永远是#document")]),e._v(" "),n("p",[e._v("nodeValue 属性：节点的值")]),e._v(" "),n("ol",[n("li",[e._v("元素节点的 nodeValue 是 undefined 或 null")]),e._v(" "),n("li",[e._v("文本节点的 nodeValue 是文本自身")]),e._v(" "),n("li",[e._v("属性节点的 nodeValue 是属性的值")])]),e._v(" "),n("p",[e._v("nodeType 属性: 节点的类型，是只读的。以下常用的几种结点类型:\n元素类型    节点类型\n元素          1\n属性          2\n文本          3\n注释          8\n文档          9")])])}),[],!1,null,null,null);o.default=d.exports}}]);