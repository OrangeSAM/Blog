(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{335:function(t,s,e){"use strict";e.r(s);var r=e(3),a=Object(r.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ol",[e("li",[t._v("TypeScript 将typeof运算符移植到了类型运算，它的操作数依然是一个值，但是返回的不是字符串，而是该值的 TypeScript 类型。")])]),t._v(" "),e("div",{staticClass:"language-typescript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("数组的类型有两种写法。第一种写法是在数组成员的类型后面，加上一对方括号。")])]),t._v(" "),e("p",[e("code",[t._v("let arr:number[] = [1, 2, 3];")]),t._v("\n上面示例中，数组arr的类型是"),e("code",[t._v("number[]")]),t._v("，其中number表示数组成员类型是"),e("code",[t._v("number")]),t._v("。")]),t._v(" "),e("p",[t._v("如果数组成员的类型比较复杂，可以写在圆括号里面。")]),t._v(" "),e("p",[e("code",[t._v("let arr:(number|string)[];")]),t._v("\n上面示例中，数组arr的成员类型是"),e("code",[t._v("number|string")]),t._v("。")]),t._v(" "),e("p",[t._v("这个例子里面的圆括号是必须的，否则因为竖杠|的优先级低于"),e("code",[t._v("[]")]),t._v("，TypeScript 会把"),e("code",[t._v("number|string[]")]),t._v(" 理解成"),e("code",[t._v("number")]),t._v("和"),e("code",[t._v("string[]")]),t._v("的联合类型。\n3. 数组类型的第二种写法是使用 TypeScript 内置的 Array 接口。")]),t._v(" "),e("p",[e("code",[t._v("let arr:Array<number> = [1, 2, 3];")])])])}),[],!1,null,null,null);s.default=a.exports}}]);