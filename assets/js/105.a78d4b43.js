(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{305:function(r,e,n){"use strict";n.r(e);var a=n(3),t=Object(a.a)({},(function(){var r=this,e=r.$createElement,n=r._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("p",[r._v("写下这篇主要是在当时需要遍历一个对象，竟然想了一秒该用什么来遍历。当时用的是"),n("code",[r._v("Object.keys()")]),r._v("中转了以下拿到对象所有的key再遍历。虽然也想到了"),n("code",[r._v("for in")]),r._v("和"),n("code",[r._v("for of")]),r._v("，但是对于他们具体的用法和区别不是很了解。因此翻看文档结合自己在使用中的体会写下这篇。")]),r._v(" "),n("h3",{attrs:{id:"for-in"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[r._v("#")]),r._v(" for in")]),r._v(" "),n("p",[r._v("for in 循环只遍历可枚举属性（包括其原型链上可枚举的属性）。\nfor...in语句以任意顺序遍历一个对象的除Symbol以外的可枚举属性。\nfor ... in是为遍历对象属性而构建的\nfor...in会迭代其原型链上的属性。")]),r._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("let arr = ['刘', '一', '笔']\narr.__proto__ = {name: 'sam'}\nfor (let item in arr){\n    console.log(arr[item])\n    // 刘 一 笔 name\n}\n")])]),r._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[r._v("1")]),n("br"),n("span",{staticClass:"line-number"},[r._v("2")]),n("br"),n("span",{staticClass:"line-number"},[r._v("3")]),n("br"),n("span",{staticClass:"line-number"},[r._v("4")]),n("br"),n("span",{staticClass:"line-number"},[r._v("5")]),n("br"),n("span",{staticClass:"line-number"},[r._v("6")]),n("br")])]),n("p",[r._v("ES1的时代就有了。")]),r._v(" "),n("p",[r._v("想要了解关于for in 的更多，可以点击"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in",target:"_blank",rel:"noopener noreferrer"}},[r._v("这里"),n("OutboundLink")],1),r._v("。")]),r._v(" "),n("hr"),r._v(" "),n("h3",{attrs:{id:"for-of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[r._v("#")]),r._v(" for of")]),r._v(" "),n("p",[r._v("for...of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。")]),r._v(" "),n("p",[r._v("对于这些可迭代对象，超出我已有知识以外的是Map跟String，刚开始看的好几遍我都把Map误以为是Object了，但到控制台里实验又不行。后面才发现， Map也是JavaScript的一个内置对象，就像Date一样，只不过我们用得很少。")]),r._v(" "),n("p",[r._v("对于for...of的循环，可以由break, throw  continue    或return终止。在这些情况下，迭代器关闭。")]),r._v(" "),n("p",[r._v("在ES6中成为规范。")]),r._v(" "),n("p",[r._v("想要了解关于for in 的更多，可以点击"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of",target:"_blank",rel:"noopener noreferrer"}},[r._v("这里"),n("OutboundLink")],1),r._v("。")]),r._v(" "),n("hr"),r._v(" "),n("h3",{attrs:{id:"两者的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两者的区别"}},[r._v("#")]),r._v(" 两者的区别")]),r._v(" "),n("p",[r._v("先看一个实例。")]),r._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("let arr = ['刘', '一', '笔']\n\nfor(item in arr) {\n    console.log(item)\n}\n// 0 1 2\n\nfor(item of arr) {\n    console.log(item)\n}\n// 刘 一 笔\n")])]),r._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[r._v("1")]),n("br"),n("span",{staticClass:"line-number"},[r._v("2")]),n("br"),n("span",{staticClass:"line-number"},[r._v("3")]),n("br"),n("span",{staticClass:"line-number"},[r._v("4")]),n("br"),n("span",{staticClass:"line-number"},[r._v("5")]),n("br"),n("span",{staticClass:"line-number"},[r._v("6")]),n("br"),n("span",{staticClass:"line-number"},[r._v("7")]),n("br"),n("span",{staticClass:"line-number"},[r._v("8")]),n("br"),n("span",{staticClass:"line-number"},[r._v("9")]),n("br"),n("span",{staticClass:"line-number"},[r._v("10")]),n("br"),n("span",{staticClass:"line-number"},[r._v("11")]),n("br")])]),n("p",[r._v("由此我们可以看出：\nfor in 遍历的是每一个迭代对象的属性；\nfor of 遍历的是每一个迭代对象的属性值。")]),r._v(" "),n("hr"),r._v(" "),n("p",[r._v("如果你只要获取到可枚举属性，查看Object.keys或用for...in循环（还会获取到原型链上的可枚举属性，不过可以使用hasOwnProperty()方法过滤掉）。")]),r._v(" "),n("p",[r._v("Object.getOwnPropertyNames()不会获取到原型链上的属性")]),r._v(" "),n("p",[r._v("https://segmentfault.com/a/1190000007908692")]),r._v(" "),n("p",[r._v("遍历对象的属性时，自带的属性不会被遍历。为什么呢\n手动添加的会被遍历。\nhasOwnProperty： 是用来判断一个对象是否有你给出名称的属性或对象。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。\nisPrototypeOf : 是用来判断要检查其原型链的对象是否存在于指定对象实例中，是则返回true，否则返回false。")])])}),[],!1,null,null,null);e.default=t.exports}}]);