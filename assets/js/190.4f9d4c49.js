(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{388:function(e,v,_){"use strict";_.r(v);var t=_(3),o=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"mvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" `MVC ``")]),e._v(" "),_("p",[e._v("view: 视图，传送指令到"),_("code",[e._v("Controller")]),e._v("\nController: 业务逻辑，完成业务逻辑后，要求"),_("code",[e._v("Model")]),e._v("改变状态\nModel: 数据保存，将新的数据发送到"),_("code",[e._v("View")]),e._v("，用户得到反馈")]),e._v(" "),_("h2",{attrs:{id:"mvp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[e._v("#")]),e._v(" "),_("code",[e._v("MVP")])]),e._v(" "),_("ol",[_("li",[e._v("各部分之间的通信，都是双向的。")]),e._v(" "),_("li",[_("code",[e._v("View")]),e._v("和"),_("code",[e._v("Model")]),e._v("不发生联系，都通过"),_("code",[e._v("Presenter")]),e._v("传递")]),e._v(" "),_("li",[_("code",[e._v("View")]),e._v('非常薄，不部署任何业务逻辑，称为"被动视图"（Passive View），即没有任何主动性，\n而 '),_("code",[e._v("Presenter")]),e._v("非常厚，所有逻辑都部署在那里。")])]),e._v(" "),_("h2",{attrs:{id:"mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[e._v("#")]),e._v(" "),_("code",[e._v("MVVM")])]),e._v(" "),_("p",[_("code",[e._v("MVVM")]),e._v("模式将MVP模式中的"),_("code",[e._v("presenter")]),e._v("改名为"),_("code",[e._v("ViewModel")]),e._v("，基本上与MVP模式完全一致。\n唯一的区别是，"),_("code",[e._v("MVVM")]),e._v("采用"),_("strong",[e._v("双向绑定")]),e._v("，View的变动，自动反应在"),_("code",[e._v("ViewModel")])])])}),[],!1,null,null,null);v.default=o.exports}}]);