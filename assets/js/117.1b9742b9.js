(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{315:function(n,s,a){"use strict";a.r(s);var e=a(3),r=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"obj-assign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obj-assign"}},[n._v("#")]),n._v(" Obj.assign")]),n._v(" "),a("p",[n._v("对于大部分语言来说, 深拷贝是不可能的.")]),n._v(" "),a("p",[n._v("浅拷贝 即 = 赋值符号")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var a = {\n    a1: 'a',\n    a2: 2\n}\nvar b = {\n    obj: {\n        name: 'b'\n    }\n}\nObject.assign(a, b)\na.obj.name=292929\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("p",[n._v("这要 b.obj.name === 29292 true")]),n._v(" "),a("h3",{attrs:{id:"from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[n._v("#")]),n._v(" from")]),n._v(" "),a("p",[n._v("在 ES5 时代, 把一个伪数组变成数组的方式是")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var a = {\n    0: '111',\n    1: '222',\n    length: 3\n}\na = Array.prototype.slice.call(a, 0)\n// slice 的返回值是一个新的数组对象\n\n创建一个长度的为N的数组\nnew Array(5) // [] length为5 但里面没有内容, 所以这样不行\n// es6\nArray.from({length: 5})// [undefined, ..., undefined]\n// es5\na = Array.apply(null, {length: 5})\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("// 创建一个函数能够返回 N 个 N 的数组")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// es6\nfunction x(n, fill) {\n    var array = Array.from({length: n}).fill(fill)\n    // 或者如下\n    // return array.map(v => fill)\n}\n// es5\nfunction x(n, fill) {\n    console.log(new Array(n + 1))\n\tconsole.log(new Array(n + 1).join(fill))\n\tconsole.log(new Array(n + 1).join(fill).split(''))\n\treturn new Array(n + 1).join(fill).split('')\n}\n非常取巧地用了join\n// join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。\n// 指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果缺省该值，数组元素用逗号（,）分隔。如果separator是空字符串(\"\")，则所有元素之间都没有任何字符。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("p",[n._v("find filter\nfind 返回值只有一个, filter 可以有多个")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 会导致死循环的一段代码\nvar  i = 0;\nwhile(i != 1) {\n    i+= 0.1\n    console.log(i)\n    if (i> 100) break\n}\nconsole.log('i is 100')\n// i is 1不会打印出来, 因为js精度的问题\n\n// 结局方法\n// ES5\nwhile (Math.abs(i-1)< 0.000001>)// 只要误差小于多少就认为相等\n// ES6\nwhile (Math.abs(i-1)< Number..EPSILON)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("// 判断一个数是不是正无穷\nfunction myIsNaN (n) {\nreturn n!==n\n// 利用 NaN 不等于他自己的特性\n}")]),n._v(" "),a("p",[n._v("// parseInt 的 bug\nparseInt(811111100000000000000000000000000) // 0\nMath.trunc(811111100000000000000000000000000) // 8.11111e+23")])])}),[],!1,null,null,null);s.default=r.exports}}]);