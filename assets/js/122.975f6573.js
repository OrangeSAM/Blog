(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{320:function(n,c,e){"use strict";e.r(c);var r=e(3),u=Object(r.a)({},(function(){var n=this,c=n.$createElement,e=n._self._c||c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("reduce 函数接受4个参数\naccumulator acc 累计器\ncurrent value cur 当前值\ncurrent index idx 当前索引\nsource array src 源数组")]),n._v(" "),e("p",[n._v("返回值是函数累计处理的结果")]),n._v(" "),e("p",[n._v("reduce为数组中的每一个元素依次执行callback 函数。\n回调函数第一次执行时，accumulator 和currentValue的取值有两种情况\n如果调用reduce() 时提供了initialValue，accumulator取值为initialValue，\ncurrentValue取数组中的第一个值；\n如果没有提供initialValue,那么accumulator取数组中的第一个值，currentValue取数组中第二个值。")]),n._v(" "),e("p",[n._v("很好理解，如果给了我一开始的累加值，那currentIndex必须要从第一个开始")]),n._v(" "),e("p",[n._v("var sum = [0, 1, 2, 3].reduce(function (accumulator, currentValue) {\nreturn accumulator + currentValue;\n}, 0);\n//用箭头函数\nvar total = [ 0, 1, 2, 3 ].reduce(\n( acc, cur ) => acc + cur,\n0\n);")]),n._v(" "),e("p",[n._v("应用 将二维数组转化为一维\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\nfunction(a, b) {\nreturn a.concat(b);\n},\n[]\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n//用箭头函数\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n( acc, cur ) => acc.concat(cur),\n[]\n);")])])}),[],!1,null,null,null);c.default=u.exports}}]);