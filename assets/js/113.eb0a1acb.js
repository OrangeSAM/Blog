(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{313:function(t,e,n){"use strict";n.r(e);var a=n(3),c=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"执行上下文-execution-context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文-execution-context"}},[t._v("#")]),t._v(" 执行上下文 Execution Context")]),t._v(" "),n("p",[t._v("每次当控制器转到可执行代码的时候，就会进入一个执行上下文。\n执行上下文可以理解为当前代码的执行环境。")]),t._v(" "),n("p",[t._v("JavaScript中的运行环境大概包括三种情况\n全局环境：JavaScript代码运行起来会首先进入该环境\n函数环境：当函数调用执行时，会进入当前函数中执行代码\neval")]),t._v(" "),n("p",[t._v("因此在一个JavaScript程序中，必定会产生多个执行上下文，JavaScript引擎会以栈的方式来处理他们，\n这个栈，我们称其为 函数调用栈 call stack。栈底永远都是全局上下文，而栈顶就是当前正在执行的上下文。")]),t._v(" "),n("p",[t._v("当代码在执行过程中，遇到以上三种情况，都会生成一个执行上下文，放入栈中，而处于栈顶的的上下文执行完毕之后，就会自动出栈。")]),t._v(" "),n("p",[t._v("熟练用-猜实现-造轮子-对比实现")])])}),[],!1,null,null,null);e.default=c.exports}}]);